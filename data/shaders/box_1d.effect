#define MAX_RADIUS 128u

uniform float4x4 ViewProj;
uniform texture2d image;

uniform float2 texel_step;
uniform float radius;

sampler_state textureSampler{
    Filter = Linear;
    AddressU = Clamp;
    AddressV = Clamp;
    MinLOD = 0;
    MaxLOD = 0;
};

struct VertData {
    float4 pos : POSITION;
    float2 uv : TEXCOORD0;
};

VertData mainTransform(VertData v_in)
{
    v_in.pos = mul(float4(v_in.pos.xyz, 1.0), ViewProj);
    return v_in;
}

float4 mainImage(VertData v_in) : TARGET
{
    // DO THE BLUR
    // 1. Sample incoming pixel
    float4 col = image.Sample(textureSampler, v_in.uv);

    // 2. March out from incoming pixel, add surrounding pixels to color
    for(uint i=1u; i<=MAX_RADIUS; i++) {
        if(i > radius) {
            break;
        }
        float offset = float(i);
        col += image.Sample(textureSampler, v_in.uv + (offset * texel_step));
        col += image.Sample(textureSampler, v_in.uv - (offset * texel_step));
    }
    float residual = radius-floor(radius);
    if(residual > 0.0f) {
        col += image.Sample(textureSampler, v_in.uv + (radius * texel_step)) * residual;
        col += image.Sample(textureSampler, v_in.uv - (radius * texel_step)) * residual;

    }
    // 3. Normalize the color with the total number of samples
    col /= (2.0f * radius + 1.0f);
    return col;
}

technique Draw
{
    pass
    {
        vertex_shader = mainTransform(v_in);
        pixel_shader = mainImage(v_in);
    }
}